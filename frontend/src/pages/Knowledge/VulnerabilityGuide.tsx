// frontend/src/pages/Knowledge/VulnerabilityGuide.tsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
    Box,
    Typography,
    Grid,
    Card,
    CardContent,
    CardActions,
    Button,
    Chip,
    TextField,
    InputAdornment,
    Divider,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Paper,
    Accordion,
    AccordionSummary,
    AccordionDetails,
    Breadcrumbs,
    Link,
    useTheme
} from '@mui/material';
import {
    Search as SearchIcon,
    ExpandMore as ExpandMoreIcon,
    Security as SecurityIcon,
    BugReport as BugReportIcon,
    Code as CodeIcon,
    Key as KeyIcon,
    Storage as StorageIcon,
    Public as PublicIcon,
    ArrowForward as ArrowForwardIcon,
    Assignment as AssignmentIcon,
    Home as HomeIcon
} from '@mui/icons-material';

// Mock vulnerability categories
const vulnerabilityCategories = [
    {
        id: 'input-validation',
        title: 'Input Validation',
        icon: <BugReportIcon />,
        count: 14,
        description: 'Vulnerabilities related to improper input validation and sanitization.'
    },
    {
        id: 'authentication',
        title: 'Authentication',
        icon: <KeyIcon />,
        count: 9,
        description: 'Issues with user authentication mechanisms and session management.'
    },
    {
        id: 'data-storage',
        title: 'Data Storage',
        icon: <StorageIcon />,
        count: 11,
        description: 'Vulnerabilities in data storage and handling sensitive information.'
    },
    {
        id: 'communication',
        title: 'Communication',
        icon: <PublicIcon />,
        count: 8,
        description: 'Issues related to insecure network communication and data transfer.'
    },
    {
        id: 'code-quality',
        title: 'Code Quality',
        icon: <CodeIcon />,
        count: 12,
        description: 'Vulnerabilities stemming from poor code quality and implementation issues.'
    }
];

// Mock vulnerabilities
const vulnerabilities = [
    {
        id: 'sql-injection',
        title: 'SQL Injection',
        category: 'input-validation',
        severity: 'Critical',
        cwe: 'CWE-89',
        description: 'SQL injection attacks occur when untrusted data is sent to an interpreter as part of a command or query.',
        impact: 'Unauthorized access to sensitive data, data manipulation, and potential system compromise.',
        recommendation: 'Use parameterized queries or prepared statements. Validate and sanitize all user inputs.'
    },
    {
        id: 'insecure-authentication',
        title: 'Insecure Authentication',
        category: 'authentication',
        severity: 'High',
        cwe: 'CWE-287',
        description: 'Authentication mechanisms that are weak or improperly implemented, allowing attackers to bypass them.',
        impact: 'Unauthorized access to user accounts, data breaches, and potential identity theft.',
        recommendation: 'Implement strong authentication methods, use secure token management, and enforce password policies.'
    },
    {
        id: 'data-leakage',
        title: 'Sensitive Data Leakage',
        category: 'data-storage',
        severity: 'High',
        cwe: 'CWE-200',
        description: 'Improper handling of sensitive data leading to unintended data exposure.',
        impact: 'Exposure of sensitive user data, compliance violations, and reputational damage.',
        recommendation: 'Use secure storage techniques, encrypt sensitive data, and implement proper access controls.'
    },
    {
        id: 'unencrypted-communication',
        title: 'Unencrypted Communication',
        category: 'communication',
        severity: 'Medium',
        cwe: 'CWE-319',
        description: 'Transmission of sensitive data without proper encryption, exposing it to eavesdropping.',
        impact: 'Data interception, man-in-the-middle attacks, and privacy violations.',
        recommendation: 'Use TLS/SSL for all sensitive communications and implement certificate pinning.'
    },
    {
        id: 'hardcoded-credentials',
        title: 'Hardcoded Credentials',
        category: 'code-quality',
        severity: 'High',
        cwe: 'CWE-798',
        description: 'Embedding authentication credentials directly in the application code.',
        impact: 'Easy discovery and exploitation of credentials, leading to unauthorized access.',
        recommendation: 'Store credentials securely outside the codebase, use environment variables or secure storage solutions.'
    }
];

// Severity colors
const severityColors = {
    'Critical': '#d32f2f',
    'High': '#f44336',
    'Medium': '#ff9800',
    'Low': '#ffc107',
    'Info': '#2196f3'
};

const VulnerabilityGuide: React.FC = () => {
    const theme = useTheme();
    const navigate = useNavigate();
    const [searchQuery, setSearchQuery] = useState('');
    const [expandedVulnerability, setExpandedVulnerability] = useState<string | null>(null);
    const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

    // Handle search
    const handleSearch = (e: React.FormEvent) => {
        e.preventDefault();
        // Implement search functionality
    };

    // Handle category selection
    const handleCategorySelect = (categoryId: string) => {
        setSelectedCategory(categoryId === selectedCategory ? null : categoryId);
    };

    // Handle vulnerability expansion
    const handleVulnerabilityExpand = (vulnerabilityId: string) => {
        setExpandedVulnerability(vulnerabilityId === expandedVulnerability ? null : vulnerabilityId);
    };

    // Filter vulnerabilities by selected category
    const filteredVulnerabilities = selectedCategory
        ? vulnerabilities.filter(vuln => vuln.category === selectedCategory)
        : vulnerabilities;

    return (
        <Box sx={{ p: 3 }}>
            {/* Breadcrumbs Navigation */}
            <Breadcrumbs sx={{ mb: 3 }}>
                <Link
                    underline="hover"
                    color="inherit"
                    sx={{ display: 'flex', alignItems: 'center' }}
                    onClick={() => navigate('/')}
                    style={{ cursor: 'pointer' }}
                >
                    <HomeIcon sx={{ mr: 0.5 }} fontSize="inherit" />
                    Home
                </Link>
                <Link
                    underline="hover"
                    color="inherit"
                    sx={{ display: 'flex', alignItems: 'center' }}
                    onClick={() => navigate('/knowledge')}
                    style={{ cursor: 'pointer' }}
                >
                    <AssignmentIcon sx={{ mr: 0.5 }} fontSize="inherit" />
                    Knowledge Base
                </Link>
                <Typography
                    sx={{ display: 'flex', alignItems: 'center' }}
                    color="text.primary"
                >
                    <SecurityIcon sx={{ mr: 0.5 }} fontSize="inherit" />
                    Vulnerability Guide
                </Typography>
            </Breadcrumbs>

            <Typography variant="h4" component="h1" gutterBottom>
                Security Vulnerability Guide
            </Typography>
            <Typography variant="body1" color="text.secondary" paragraph>
                Comprehensive information about common security vulnerabilities in mobile applications,
                their impact, and recommended mitigation strategies.
            </Typography>

            {/* Search Bar */}
            <Box component="form" onSubmit={handleSearch} sx={{ mb: 4, maxWidth: 600 }}>
                <TextField
                    fullWidth
                    variant="outlined"
                    placeholder="Search vulnerabilities..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    InputProps={{
                        startAdornment: (
                            <InputAdornment position="start">
                                <SearchIcon />
                            </InputAdornment>
                        ),
                        endAdornment: (
                            <InputAdornment position="end">
                                <Button variant="contained" type="submit" size="small">
                                    Search
                                </Button>
                            </InputAdornment>
                        ),
                    }}
                />
            </Box>

            <Grid container spacing={3}>
                {/* Left Sidebar - Categories */}
                <Grid item xs={12} md={3}>
                    <Typography variant="h6" gutterBottom>
                        Categories
                    </Typography>
                    <List component={Paper} sx={{ mb: 3 }}>
                        {vulnerabilityCategories.map((category) => (
                            <ListItem
                                key={category.id}
                                button
                                selected={selectedCategory === category.id}
                                onClick={() => handleCategorySelect(category.id)}
                            >
                                <ListItemIcon>
                                    {category.icon}
                                </ListItemIcon>
                                <ListItemText
                                    primary={category.title}
                                    secondary={`${category.count} vulnerabilities`}
                                />
                            </ListItem>
                        ))}
                    </List>

                    <Typography variant="h6" gutterBottom>
                        Severity Levels
                    </Typography>
                    <Paper sx={{ p: 2 }}>
                        {Object.entries(severityColors).map(([severity, color]) => (
                            <Box key={severity} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                                <Box
                                    sx={{
                                        width: 16,
                                        height: 16,
                                        borderRadius: '50%',
                                        backgroundColor: color,
                                        mr: 1
                                    }}
                                />
                                <Typography variant="body2">
                                    {severity}
                                </Typography>
                            </Box>
                        ))}
                    </Paper>
                </Grid>

                {/* Main Content - Vulnerabilities */}
                <Grid item xs={12} md={9}>
                    {selectedCategory && (
                        <Box sx={{ mb: 3 }}>
                            <Typography variant="h5" gutterBottom>
                                {vulnerabilityCategories.find(cat => cat.id === selectedCategory)?.title} Vulnerabilities
                            </Typography>
                            <Typography variant="body2" color="text.secondary" paragraph>
                                {vulnerabilityCategories.find(cat => cat.id === selectedCategory)?.description}
                            </Typography>
                            <Divider sx={{ my: 2 }} />
                        </Box>
                    )}

                    {filteredVulnerabilities.length === 0 ? (
                        <Paper sx={{ p: 3, textAlign: 'center' }}>
                            <Typography variant="body1">
                                No vulnerabilities found matching your criteria.
                            </Typography>
                        </Paper>
                    ) : (
                        filteredVulnerabilities.map((vulnerability) => (
                            <Accordion
                                key={vulnerability.id}
                                expanded={expandedVulnerability === vulnerability.id}
                                onChange={() => handleVulnerabilityExpand(vulnerability.id)}
                                sx={{ mb: 2 }}
                            >
                                <AccordionSummary
                                    expandIcon={<ExpandMoreIcon />}
                                >
                                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                                        <Typography variant="subtitle1" sx={{ flexGrow: 1 }}>
                                            {vulnerability.title}
                                        </Typography>
                                        <Chip
                                            label={vulnerability.severity}
                                            size="small"
                                            sx={{
                                                backgroundColor: `${severityColors[vulnerability.severity as keyof typeof severityColors]}20`,
                                                color: severityColors[vulnerability.severity as keyof typeof severityColors],
                                                ml: 1
                                            }}
                                        />
                                    </Box>
                                </AccordionSummary>
                                <AccordionDetails>
                                    <Grid container spacing={2}>
                                        <Grid item xs={12}>
                                            <Typography variant="body2" paragraph>
                                                {vulnerability.description}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="subtitle2" gutterBottom>
                                                Impact
                                            </Typography>
                                            <Typography variant="body2" paragraph>
                                                {vulnerability.impact}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12} sm={6}>
                                            <Typography variant="subtitle2" gutterBottom>
                                                CWE Reference
                                            </Typography>
                                            <Link
                                                href={`https://cwe.mitre.org/data/definitions/${vulnerability.cwe.split('-')[1]}.html`}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                            >
                                                {vulnerability.cwe}
                                            </Link>
                                        </Grid>
                                        <Grid item xs={12}>
                                            <Typography variant="subtitle2" gutterBottom>
                                                Recommended Mitigation
                                            </Typography>
                                            <Typography variant="body2">
                                                {vulnerability.recommendation}
                                            </Typography>
                                        </Grid>
                                        <Grid item xs={12}>
                                            <Button
                                                variant="outlined"
                                                endIcon={<ArrowForwardIcon />}
                                                size="small"
                                                sx={{ mt: 1 }}
                                            >
                                                Detailed Guide
                                            </Button>
                                        </Grid>
                                    </Grid>
                                </AccordionDetails>
                            </Accordion>
                        ))
                    )}
                </Grid>
            </Grid>
        </Box>
    );
};

export default VulnerabilityGuide;