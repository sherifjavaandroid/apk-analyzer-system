# backend/report-service/app/services/markdown_service.py
from typing import Dict, List, Any, Optional
from datetime import datetime

async def generate_markdown(report_type: str, analysis_data: Dict[str, Any], title: str) -> str:
    """
    Generate a markdown report based on analysis data.

    Args:
        report_type: Type of report (security, performance, technology, etc.)
        analysis_data: Dictionary of analysis results
        title: Report title

    Returns:
        Markdown formatted text
    """
    # Start with report header
    markdown = f"# {title}\n\n"
    markdown += f"*Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n\n"

    # Generate report content based on type
    if report_type == "security":
        markdown += generate_security_markdown(analysis_data)
    elif report_type == "performance":
        markdown += generate_performance_markdown(analysis_data)
    elif report_type == "technology":
        markdown += generate_technology_markdown(analysis_data)
    elif report_type == "comprehensive":
        markdown += generate_comprehensive_markdown(analysis_data)
    elif report_type == "executive":
        markdown += generate_executive_markdown(analysis_data)
    else:
        markdown += f"## {report_type.capitalize()} Report\n\n"
        markdown += "No specific template available for this report type.\n\n"

    # Add analysis details
    markdown += "## Analysis Details\n\n"

    for analysis_id, analysis in analysis_data.items():
        markdown += f"### Analysis ID: {analysis_id}\n\n"

        if "filename" in analysis:
            markdown += f"**File:** {analysis['filename']}\n\n"
        elif "repository_url" in analysis:
            markdown += f"**Repository:** {analysis['repository_url']}\n\n"

        markdown += f"**Status:** {analysis['status']}\n"
        markdown += f"**Created:** {analysis['created_at']}\n"

        if "completed_at" in analysis and analysis["completed_at"]:
            markdown += f"**Completed:** {analysis['completed_at']}\n"

        markdown += "\n"

    # Add footer
    markdown += "---\n"
    markdown += "*Report generated by the Security Analysis Platform*\n"

    return markdown

def generate_security_markdown(analysis_data: Dict[str, Any]) -> str:
    """Generate security report markdown"""
    markdown = "## Security Analysis Report\n\n"

    # Initialize counters
    total_issues = 0
    severity_counts = {"critical": 0, "high": 0, "medium": 0, "low": 0, "info": 0}

    # Process each analysis
    for analysis_id, analysis in analysis_data.items():
        if "results" in analysis and analysis["results"] and "security" in analysis["results"]:
            security = analysis["results"]["security"]

            # Count issues
            if "issues_count" in security:
                total_issues += security["issues_count"]

            # Count by severity
            if "severity_counts" in security:
                for severity, count in security["severity_counts"].items():
                    severity_counts[severity] += count

    # Add summary
    markdown += "### Summary\n\n"
    markdown += f"Total analyses: {len(analysis_data)}\n"
    markdown += f"Total issues: {total_issues}\n\n"

    # Add severity distribution
    markdown += "### Severity Distribution\n\n"
    for severity, count in severity_counts.items():
        if count > 0:
            markdown += f"- **{severity.capitalize()}:** {count}\n"

    markdown += "\n"

    # Add issues
    markdown += "### Security Issues\n\n"

    for analysis_id, analysis in analysis_data.items():
        if "results" in analysis and analysis["results"] and "security" in analysis["results"]:
            security = analysis["results"]["security"]

            if "issues" in security and security["issues"]:
                source_name = analysis.get("filename", analysis.get("repository_url", "Unknown"))
                markdown += f"#### Issues in {source_name}\n\n"

                for issue in security["issues"]:
                    markdown += f"##### {issue['title']}\n\n"
                    markdown += f"**Severity:** {issue['severity'].capitalize()}\n\n"
                    markdown += f"**Description:** {issue['description']}\n\n"

                    if "recommendation" in issue and issue["recommendation"]:
                        markdown += f"**Recommendation:** {issue['recommendation']}\n\n"

                    if "location" in issue and issue["location"]:
                        location = issue["location"]
                        if "line_number" in issue and issue["line_number"]:
                            location += f":{issue['line_number']}"
                        markdown += f"**Location:** {location}\n\n"

                    markdown += "---\n\n"

    return markdown

def generate_performance_markdown(analysis_data: Dict[str, Any]) -> str:
    """Generate performance report markdown"""
    markdown = "## Performance Analysis Report\n\n"

    # Process each analysis
    for analysis_id, analysis in analysis_data.items():
        if "results" in analysis and analysis["results"] and "performance" in analysis["results"]:
            performance = analysis["results"]["performance"]

            source_name = analysis.get("filename", analysis.get("repository_url", "Unknown"))
            markdown += f"### Performance Analysis for {source_name}\n\n"

            # APK Size
            if "apk_size" in performance:
                apk_size = performance["apk_size"]
                markdown += "#### APK Size\n\n"
                markdown += f"Total Size: {apk_size.get('total_size_formatted', 'Unknown')}\n\n"

                if "components" in apk_size:
                    markdown += "| Component | Size | Percentage |\n"
                    markdown += "|-----------|------|-----------|\n"

                    for component in apk_size["components"]:
                        markdown += f"| {component['name']} | {component['size_formatted']} | {component['percentage']}% |\n"

                    markdown += "\n"

                if "estimated_download_time" in apk_size:
                    markdown += "#### Estimated Download Times\n\n"

                    markdown += "| Connection | Time |\n"
                    markdown += "|------------|------|\n"

                    for connection, time in apk_size["estimated_download_time"].items():
                        markdown += f"| {connection} | {time} |\n"

                    markdown += "\n"

            # Startup Estimate
            if "startup_estimate" in performance:
                startup = performance["startup_estimate"]
                markdown += "#### Startup Performance\n\n"
                markdown += f"Score: {startup.get('score', 'Unknown')} (lower is better)\n\n"

                if "factors" in startup and startup["factors"]:
                    markdown += "Factors affecting startup time:\n\n"

                    for factor in startup["factors"]:
                        markdown += f"- **{factor['name']}** ({factor['impact']}): {factor['description']}\n"

                    markdown += "\n"

                if "recommendations" in startup and startup["recommendations"]:
                    markdown += "Recommendations:\n\n"

                    for recommendation in startup["recommendations"]:
                        markdown += f"- {recommendation}\n"

                    markdown += "\n"

            # Memory Usage
            if "memory_usage" in performance:
                memory = performance["memory_usage"]
                markdown += "#### Memory Usage\n\n"
                markdown += f"Score: {memory.get('score', 'Unknown')} (lower is better)\n\n"

                if "factors" in memory and memory["factors"]:
                    markdown += "Factors affecting memory usage:\n\n"

                    for factor in memory["factors"]:
                        markdown += f"- **{factor['name']}** ({factor['impact']}): {factor['description']}\n"

                    markdown += "\n"

            # Battery Impact
            if "battery_impact" in performance:
                battery = performance["battery_impact"]
                markdown += "#### Battery Impact\n\n"
                markdown += f"Score: {battery.get('score', 'Unknown')} (lower is better)\n\n"

                if "factors" in battery and battery["factors"]:
                    markdown += "Factors affecting battery usage:\n\n"

                    for factor in battery["factors"]:
                        markdown += f"- **{factor['name']}** ({factor['impact']}): {factor['description']}\n"

                    markdown += "\n"

            # UI Performance
            if "ui_performance" in performance:
                ui = performance["ui_performance"]
                markdown += "#### UI Performance\n\n"
                markdown += f"Score: {ui.get('score', 'Unknown')} (lower is better)\n\n"

                if "factors" in ui and ui["factors"]:
                    markdown += "Factors affecting UI performance:\n\n"

                    for factor in ui["factors"]:
                        markdown += f"- **{factor['name']}** ({factor['impact']}): {factor['description']}\n"

                    markdown += "\n"

    return markdown

def generate_technology_markdown(analysis_data: Dict[str, Any]) -> str:
    """Generate technology report markdown"""
    markdown = "## Technology Detection Report\n\n"

    # Process each analysis
    for analysis_id, analysis in analysis_data.items():
        if "results" in analysis and analysis["results"] and "technology" in analysis["results"]:
            technology = analysis["results"]["technology"]

            source_name = analysis.get("filename", analysis.get("repository_url", "Unknown"))
            markdown += f"### Technology Analysis for {source_name}\n\n"

            # Frameworks
            if "frameworks" in technology and "detected" in technology["frameworks"]:
                frameworks = technology["frameworks"]["detected"]

                markdown += "#### Frameworks\n\n"

                if frameworks:
                    for framework in frameworks:
                        detail = technology["frameworks"].get("details", {}).get(framework, {})
                        confidence = detail.get("confidence", "Unknown")

                        markdown += f"- **{framework}** (Confidence: {confidence}%)\n"

                        # Add version if available
                        if "version" in detail:
                            markdown += f"  - Version: {detail['version']}\n"
                else:
                    markdown += "No frameworks detected.\n"

                markdown += "\n"

            # Programming Languages
            if "programming_languages" in technology and "detected" in technology["programming_languages"]:
                languages = technology["programming_languages"]["detected"]

                markdown += "#### Programming Languages\n\n"

                if languages:
                    for language in languages:
                        detail = technology["programming_languages"].get("details", {}).get(language, {})
                        confidence = detail.get("confidence", "Unknown")
                        primary = detail.get("primary", False)

                        markdown += f"- **{language}** (Confidence: {confidence}%){' (Primary)' if primary else ''}\n"
                else:
                    markdown += "No programming languages detected.\n"

                markdown += "\n"

            # Libraries
            if "libraries" in technology and "detected" in technology["libraries"]:
                libraries = technology["libraries"]["detected"]

                markdown += "#### Libraries\n\n"

                if libraries:
                    for library in libraries:
                        detail = technology["libraries"].get("details", {}).get(library, {})
                        category = detail.get("category", "Unknown")

                        markdown += f"- **{library}** (Category: {category})\n"
                else:
                    markdown += "No libraries detected.\n"

                markdown += "\n"

            # Backend Technologies
            if "backend_technologies" in technology and "detected" in technology["backend_technologies"]:
                backends = technology["backend_technologies"]["detected"]

                markdown += "#### Backend Technologies\n\n"

                if backends:
                    for backend in backends:
                        detail = technology["backend_technologies"].get("details", {}).get(backend, {})
                        confidence = detail.get("confidence", "Unknown")

                        markdown += f"- **{backend}** (Confidence: {confidence}%)\n"
                else:
                    markdown += "No backend technologies detected.\n"

                markdown += "\n"

    return markdown

def generate_comprehensive_markdown(analysis_data: Dict[str, Any]) -> str:
    """Generate comprehensive report markdown combining all report types"""
    markdown = "## Comprehensive Analysis Report\n\n"

    # Add each section
    markdown += generate_security_markdown(analysis_data)
    markdown += "\n---\n\n"
    markdown += generate_performance_markdown(analysis_data)
    markdown += "\n---\n\n"
    markdown += generate_technology_markdown(analysis_data)

    return markdown

def generate_executive_markdown(analysis_data: Dict[str, Any]) -> str:
    """Generate executive summary markdown"""
    markdown = "## Executive Summary\n\n"

    # Generate summary data from the dashboard service
    from app.services.dashboard_data import generate_executive_dashboard
    dashboard = generate_executive_dashboard(analysis_data)

    # Add summary metrics
    markdown += "### Key Metrics\n\n"

    markdown += f"- **Total Analyses:** {dashboard['summary']['total_analyses']}\n"
    markdown += f"- **Security Risk Score:** {dashboard['summary']['security_risk_score']}/10\n"
    markdown += f"- **Performance Score:** {dashboard['summary']['performance_score']}/100 (lower is better)\n"
    markdown += f"- **Critical Security Issues:** {dashboard['summary']['critical_issues']}\n"
    markdown += f"- **High Security Issues:** {dashboard['summary']['high_issues']}\n\n"

    # Add key findings
    if "key_findings" in dashboard and dashboard["key_findings"]:
        markdown += "### Key Findings\n\n"

        for finding in dashboard["key_findings"]:
            markdown += f"- {finding}\n"

        markdown += "\n"

    # Add recommendations
    if "recommendations" in dashboard and dashboard["recommendations"]:
        markdown += "### Recommendations\n\n"

        for recommendation in dashboard["recommendations"]:
            markdown += f"- {recommendation}\n"

        markdown += "\n"

    return markdown